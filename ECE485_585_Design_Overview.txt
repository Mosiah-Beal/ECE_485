Design Overview ECE 485/585

The stated design parameters are:
Your team is responsible for the design and simulation of a split L1 cache for a new 32-bit processor
which can be used with up to three other processors in a shared memory configuration. The system 
employs a MESI protocol to ensure cache coherence. Your L1 instruction cache is four-way set associative
and consists of 16K sets and 64-byte lines. Your L1 data cache is an eight-way set associative and 
consists of 16K sets of 64-byte lines. The L1 data cache is write-back using write allocate and is
write-back except for the first write to a line which is write-through. Both caches employ LRU replacement
policy and are backed by a shared L2 cache. The cache hierarchy employs inclusivity. 


In order to achieve this design our code is broken into three components:
First, we have a module to simulate the CPU.
Then a cache controller module implements the MESI protocol.
Then the cache module(s) itself which contains the set associative cache(s).


The operation of the system is as follows:

1. CPU sends instruction {
        
        CPU module contains a type-defined struct called processor instruction and a struct pointer called processor.
        Within the processor_instructio_t struct there is another struct called address_t. 
        The address struct members are the necessary part select of the CPU address.
        
        typedef struct packed {
        reg[3:0] n; // instruction
        address_t address; // address
        reg[2:0] PID; // processor id
        logic[1:0] cache_num; //which cache
        } processor_instruction_t *processor;


        typedef struct packed {
        reg [11:0] tag; // 12 bits for tag
        reg [13:0] set_index; // 14 bits for set index
        reg [5:0] byte_offset; // 6 bits for byte offset
        } address_t;


        the address_t struct creates the necessary set index byte offset and tag. The processor_instruction struct 
        contains the address struct and additional important information such as processor ID, 
        which cache the instruction is referencing(this may change), and instruction n value.
        
        To simulate the processors, an array of address_t structs is initialized each with an independent processor ID.
        Instructions can be sent in arbitrary order by incrementing through the array of structs. 

        The output of this module needs to port the instruction struct to the cache module.
        The address member of the processor_instruction struct needs to be the current address_t struct in the
        array of structs i.e. processor _instruction_t.address = address_t p1_instruction_array [i] within a for loop.
 
2. CPU instruction is used to determine if cache hit
        
        The processor_instruction struct is ported to the cache module to determine if a cache is hit.
        The address_t member is accessed and compared to the cache line. The structure of a cache line is as follows:


        The necessary information for a cache line is stored in a struct called cache_line_t.
        The members of the cache_line_t struct are the tag, the LRU bits, the mesi state bits, and the 64 bytes of data.


        typedef struct packed {
        reg [11:0] tag; // 12 bits for tag
        reg [2:0] LRU; // 3 bits for LRU
        reg [1:0] MESI_bits;
        reg [511:0] data // 2 bits for MESI states
        } cache_line_t;


        The tag is compared to the tag member of the processor_instruction_t.address struct in order to determine
        if there is a cache hit. The LRU bits keep track of how recently the cache column was accessed, the mesi bits
        keep track of the state of that cache column at that particular set index, and the data is self-explanatory. 


        The entire cache is initialized with a two-dimensional array.

        parameter ways = 8;
        parameter sets = 16384; //16k = 2^15
        // Declare the cache as an array of cache lines
        cache_line_t cache[sets-1][ways-1:0]; // L1 data cache
        
        The two-dimensional array creates a table of structs. For example 



Set index       Ways = 0                Ways = 1                Ways = 2
        0	reg [11:0] tag;         reg [11:0] tag;         reg [11:0] tag; 
                reg [2:0] LRU;          reg [2:0] LRU;          reg [2:0] LRU;
                reg [1:0] MESI_bits;    reg [1:0] MESI_bits;    reg [1:0] MESI_bits;
                reg [511:0] data        reg [511:0] data        reg [511:0] data

        1	reg [11:0] tag;         reg [11:0] tag;         reg [11:0] tag; 
                reg [2:0] LRU;          reg [2:0] LRU;          reg [2:0] LRU;
                reg [1:0] MESI_bits;    reg [1:0] MESI_bits;    reg [1:0] MESI_bits;
                reg [511:0] data        reg [511:0] data        reg [511:0] data


        The above cache is a 3-way set associative cache with two sets.
        The size of the cache is determined by the ways parameter and the number of sets
        is determined by the sets parameter. In our case, ways will be 4 and 8 and sets will be 16k.
        Making a table of 16k rows and 4 or 8 columns. 
        
        Therefore as stated above a hit will be determined by comparing the processor _instruction_t.address.tag member
        to the cache[processor _instruction_t.address .set_index][ways].tag member. The comparison is achieved with a for loop. 


        for (int i = 0; i < ways; i++) begin
        data_read_bus[i] = x; // Assume this cache has no hit


        // check if there is a match in the way, using the set index passed in (updates read_bus)
        if(desired_address.tag == cache[desired_address.set_index][i]) {

        case(test_intruction.n) // which instruction is this?
        
        0: // read instruction
        data_read_bus[i] = 1; // if read instruction -> hit;


        1: data_read_bus[i] = z;


        2: data_read_bus[i] = 1;


        3: // L2 invalidate
        data_read_bus[i] = z;
        
        default: data_read_bus[i] = x;
        end


        The hit logic uses the four states of the logic type to specify both the hit(logic 1) and hitM(logic z) signals. 
        


3. Update MESI-FSM state
        
        Once the hit and hitM signals are generated the next state of the FSM can be calculated
        The cache module will instance the MESI FSM module. The MESI FSM module will take the current instruction 
        and the MESI bits of the current cache line to calculate the next state of the current cache line. 
        The MESI FSM will make the state change and output invalidate signals or signals to change the state of other caches.
        The memory operation of the current cache will be executed within the output of the FSM. 
        The memory operation will be executed by the state function. For example: 
        
        function automatic logic owner_invalid_mem_op( 
        input [2:0] n, //Instruction //killed (in test_instruction)
        input [1:0] mesi_now, //M,E,S,I //killed (in cache)
        input cache_line_t cache,
        input address_t owner_address, //killed (in test_instruction)
        input cache_line_t shared_cache_in,
        input data_mem_in,
        input hit,hitM,busRd,busRdX // killed (4-state bus)
        output [7:0] data
        ); 


        Above is the function declaration of the invalid state memory operation. 
        This function will execute the necessary memory operations on the cache. 
        It will be located in the corresponding state output. For example:


I:begin
        case(n)


                0: begin
                cache_bus_out = state;
                //call mem op function
                busRd = 1;
                busRdX = 0;
                end


                1: begin
                cache_bus_out = state;
                //call mem op function
                busRdX = 1;
                busRd = 0;
                end


                default: begin
                cache_bus_out = state;
                end


        endcase
end


        Each state of the mesi will have its own mem op function to be executed for the output. In this
        way the output of each state will appropriately modify the cache line at the given set index.
4.  Update snooping processor caches
        how exactly this will occur is TBD


Tentative design update. 
Add snooping op to the mem op function. 
Pass outputs of the mem op to the snooping op. 
Locate mem op and snoop op in outputs of FSM.