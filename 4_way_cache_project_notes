
//description of cache size + main memory size

width of offset = log2(64) = 6 // log 2 of cache line size
number of cache lines = memory size/64 = 64k memory size = 64*64k | 4MB
number of sets = 64k/4 = 16k
number of tag bits = 32 - 6 - 14 = 12


//operation of set associative cache

four banks make up the tag locations inside each set 16k sets of 4 tag location
similarly 16k sets of 4 64 byte memory locations
set index selects the line each line has depth of 4 (imagine 4 lines compressed into 1)
tags are compared in tag mem
if a hit output of comparator is muxed
mux output selects memory bank
byte offset selects byte within memory

//action items + questions

write org is important not sure how 
need to write to cache in order? for example if in set 000 1 block is valid 3 blocks invalid
check if block one is valid if not check if block two is valid etc(seems like definitely yes) 
how to design this algorithmn? with conditionals (so far conditionals are ugly would rather use case) or case statement

as I understand it write through data is changed in both memory and cache 
write back data is only changed in cache and dirty bit is set. 
when a 
for example a write to memory operation would store the memory to the cache a 

do we need to mantain coherence with the theoretical 3 additional processors on the bus?

Description of write back vs write through + write back algorithmn?



Action items
use n for mealey input
add registers for next state transition
add 0-9 input

// Instruction (n)
Where n is 
0 read data request to L1 data cache 
1 write data request to L1 data cache 
2 instruction fetch (a read request to L1 instruction cache) 
3 invalidate command from L2 
4 data request from L2 (in response to snoop) 
8 clear the cache and reset all state (and statistics) 
9 print contents and state of the cache (allow subsequent trace activity)


//MESI



LRU

increment bits less than n

{0,1,2,3} 2 becomes new 0
{1,2,0,3} 3 becomes new 0
{2,3,1,0} 

algorithm to maintain least recently used = increment bits less than n



// general plan

2.build l1 instruction cache(module 1)

3.test

2. build l1 data cache(module 2)

3. build shared l2 cache(module 3)

4. implement snooping functionality

1. build mesi finite state machine(module 4 top level)

6. port caches to mesi state machine

//verilog questions

case statements can have conditionals? ie

case(example)

example != right: dont use this syntax;

example == right: yippee!;
